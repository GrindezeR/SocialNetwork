{"version":3,"file":"static/js/292.ed0e9361.chunk.js","mappings":"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","sources":["HOC/WithAuthRedirect.tsx","Utils/validators/validators.ts","webpack://social_network/./src/common/FormsControls/FormsControls.module.css?9c32","common/FormsControls/FormsControls.tsx","webpack://social_network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social_network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://social_network/./src/components/Dialogs/DialigItem/DialogsItem.module.css?d3cd","components/Dialogs/DialigItem/DialogsItem.tsx","webpack://social_network/./src/components/Dialogs/DialogsForm.module.css?12d8","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n}\r\n// Создаем HOC чтобы не писать в каждой компоненте проверку на авторизацию,\r\n// просто оборачиваем нужные компоненты в данный HOC\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MstpType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const mstp = (state: AppStateType): MstpType => {\r\n        return {\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n\r\n    return connect(mstp)(RedirectComponent)\r\n}","import {FormikErrorType} from \"../../components/Login/LoginForm\";\r\n\r\nexport const required = (value: string) => {\r\n    let error = ''\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    error = `Field required`\r\n    return error\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    let error = ''\r\n    return (value: string) => {\r\n        if (value.length > maxLength) {\r\n            error = `Max length is ${maxLength} symbols`\r\n            return error;\r\n        }\r\n        return undefined\r\n    }\r\n}\r\ntype ValuesType = {\r\n    email: string\r\n    password: string\r\n    remember: boolean\r\n}\r\n\r\nexport const validateFormik = (values: ValuesType,\r\n                               errors: FormikErrorType,\r\n                               minPassLength: number) => {\r\n    if (!values.email) {\r\n        errors.email = 'Email is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Password required';\r\n    } else if (values.password.length < minPassLength) {\r\n        errors.password = `Min length ${minPassLength} characters`;\r\n    }\r\n    return errors;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__kD7mL\",\"errorText\":\"FormsControls_errorText__bBbMT\"};","import React from \"react\";\r\nimport {FieldProps} from \"formik\";\r\nimport s from './FormsControls.module.css';\r\n\r\ntype CustomInputPropsType = FieldProps & {\r\n    ClassName: string\r\n    placeholder: string\r\n}\r\n\r\nexport const CustomInput = ({form: {touched, errors}, field,\r\n                                ClassName, placeholder, ...props}: CustomInputPropsType) => {\r\n\r\n    const customClass = (touched && errors[field.name]) ? `${ClassName} ${s.error}` : ClassName\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                placeholder={placeholder}\r\n                className={customClass} {...field} {...props}/>\r\n            <div className={s.errorText}>\r\n                {touched && errors[field.name]}\r\n            </div>\r\n        </>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__JMHMo\",\"dialogItems\":\"Dialogs_dialogItems__uLtj6\",\"dialog\":\"Dialogs_dialog__+-YyM\",\"messages\":\"Dialogs_messages__b0Z0N\",\"message\":\"Dialogs_message__HQ0qX\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Message_wrapper__imrhM\",\"message\":\"Message_message__qmukA\",\"angle\":\"Message_angle__FIJAQ\",\"name\":\"Message_name__Wz4Ip\",\"text\":\"Message_text__tPs7i\",\"time\":\"Message_time__AebT4\",\"avatar\":\"Message_avatar__Egfgs\"};","import React from \"react\";\r\nimport style from './Message.module.css';\r\nimport {dialogsMessagesDataType} from \"../../../Redux/Dialogs-reducer\";\r\nimport noAvatar from '../../../common/images/noAvatar.png';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\n\r\nfunction Messages(props: dialogsMessagesDataType) {\r\n    const avatar = useSelector<AppStateType, string>(state => state.profilePage.profile.photos.small);\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.avatar}>\r\n                <img src={avatar || noAvatar} alt={'avatar'}/>\r\n            </div>\r\n            <div className={style.angle}/>\r\n            <div className={style.message}>\r\n                <span className={style.text}>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Messages;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"DialogsItem_wrapper__H8N8v\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from '../../../common/images/dialogAvatar.png'\r\nimport {dialogsNamesDataType} from \"../../../Redux/Dialogs-reducer\";\r\nimport s from './DialogsItem.module.css';\r\n\r\nfunction DialogItem(props: dialogsNamesDataType) {\r\n    return (\r\n        <NavLink className={s.wrapper} to={`/dialogs/${props.id}`}>\r\n            <img src={avatar} alt={'dialogAvatar'}/>\r\n            <span>{props.name}</span>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"messageSendWrapper\":\"DialogsForm_messageSendWrapper__mPd2I\",\"customInput\":\"DialogsForm_customInput__lNQAi\"};","import {Field, FieldProps, Form, Formik, FormikHelpers} from \"formik\";\r\nimport s from \"./DialogsForm.module.css\";\r\nimport React from \"react\";\r\nimport {CustomInput} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator} from \"../../Utils/validators/validators\";\r\nimport sc from '../../common/styles/commonStyles.module.css';\r\n\r\ntype DialogsFormType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\ntype MessageFormValues = {\r\n    message: string\r\n}\r\n\r\nexport const DialogsForm = ({addMessage}: DialogsFormType) => {\r\n    const initialValues: MessageFormValues = {\r\n        message: ''\r\n    }\r\n\r\n    const onSubmitHandler = (values: MessageFormValues, actions: FormikHelpers<MessageFormValues>) => {\r\n        addMessage(values.message);\r\n        actions.resetForm();\r\n        actions.setSubmitting(false);\r\n    }\r\n\r\n    const customField = (props: FieldProps) => {\r\n        return <CustomInput ClassName={s.customInput}\r\n                            placeholder={`Type you message`}\r\n                            {...props}/>\r\n    }\r\n    return (\r\n        <Formik initialValues={initialValues} onSubmit={onSubmitHandler}>\r\n            {\r\n                ({errors}) => (\r\n                    <Form className={s.messageSendWrapper}>\r\n                        <Field name={'message'}\r\n                               validate={maxLengthCreator(10)}>\r\n                            {customField}\r\n                        </Field>\r\n                        <div>\r\n                            <button className={sc.button} type={'submit'}>Send</button>\r\n                        </div>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    );\r\n}","import s from './Dialogs.module.css';\r\nimport Messages from \"./Message/Message\";\r\nimport DialogItem from \"./DialigItem/DialogsItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {DialogsForm} from \"./DialogsForm\";\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    const dialogsElements = props.dialogsNamesData.map(d =>\r\n        <DialogItem key={d.id}\r\n                    id={d.id}\r\n                    name={d.name}/>)\r\n    const messagesElements = props.dialogsMessagesData.map(m =>\r\n        <Messages key={m.id}\r\n                  id={m.id}\r\n                  message={m.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.dialogItems}>\r\n                <span>{dialogsElements}</span>\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>\r\n                    <span>{messagesElements}</span>\r\n                </div>\r\n                <DialogsForm addMessage={props.addMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialogs;","import Dialogs from \"./Dialogs\";\r\nimport {\r\n    addMessage,\r\n    dialogsMessagesDataType,\r\n    dialogsNamesDataType,\r\n} from \"../../Redux/Dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    dialogsNamesData: dialogsNamesDataType[]\r\n    dialogsMessagesData: dialogsMessagesDataType[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsNamesData: state.dialogsPage.dialogsNamesData,\r\n        dialogsMessagesData: state.dialogsPage.dialogsMessagesData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageText: string) => dispatch(addMessage(newMessageText)),\r\n    }\r\n}\r\n\r\n// Compose позволяет нам собрать все обертки\\HOC's вместе и обернуть целевую компоненту,\r\n// важна последовательность, на данном примере - возьми Dialogs и передай в withAuthRedirect,\r\n// далее возьми ее результат и передай в connect, т.е. распутываем снизу вверх\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs) as ComponentType\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["withAuthRedirect","Component","connect","state","isAuth","auth","props","restProps","to","maxLengthCreator","maxLength","value","length","validateFormik","values","errors","minPassLength","email","test","password","CustomInput","form","touched","field","ClassName","placeholder","customClass","name","s","className","avatar","useSelector","profilePage","profile","photos","small","style","src","noAvatar","alt","message","id","DialogsForm","addMessage","customField","initialValues","onSubmit","actions","resetForm","setSubmitting","validate","sc","type","dialogsElements","dialogsNamesData","map","d","messagesElements","dialogsMessagesData","m","Message","compose","dialogsPage","dispatch","newMessageText","Dialogs","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}