{"version":3,"file":"static/js/89.375cff1d.chunk.js","mappings":"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","sources":["HOC/WithAuthRedirect.tsx","Utils/validators/validators.ts","webpack://social_network/./src/common/FormsControls/FormsControls.module.css?9c32","common/FormsControls/FormsControls.tsx","webpack://social_network/./src/components/Profile/Profile.module.css?b512","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://social_network/./src/components/Profile/AboutProfile/AboutProfile.module.css?7d95","webpack://social_network/./src/components/Profile/AboutProfile/ProfileData/ProfileData.module.css?1e0d","webpack://social_network/./src/components/Profile/AboutProfile/ProfileStatus/ProfileStatus.module.css?5ee4","components/Profile/AboutProfile/ProfileStatus/ProfileStatus.tsx","webpack://social_network/./src/components/Profile/AboutProfile/ProfileContacts/ProfileContacts.module.css?7d9e","components/Profile/AboutProfile/ProfileContacts/ProfileContacts.tsx","components/Profile/AboutProfile/ProfileData/ProfileData.tsx","components/Profile/AboutProfile/ProfileData/ProfileDataForm.tsx","components/Profile/AboutProfile/AboutProfile.tsx","webpack://social_network/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","webpack://social_network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../javascript/esm|D:/Project/Education/Incubator/Projects/SocialNetwork/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n}\r\n// Создаем HOC чтобы не писать в каждой компоненте проверку на авторизацию,\r\n// просто оборачиваем нужные компоненты в данный HOC\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MstpType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const mstp = (state: AppStateType): MstpType => {\r\n        return {\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n\r\n    return connect(mstp)(RedirectComponent)\r\n}","import {FormikErrorType} from \"../../components/Login/LoginForm\";\r\n\r\nexport const required = (value: string) => {\r\n    let error = ''\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    error = `Field required`\r\n    return error\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    let error = ''\r\n    return (value: string) => {\r\n        if (value.length > maxLength) {\r\n            error = `Max length is ${maxLength} symbols`\r\n            return error;\r\n        }\r\n        return undefined\r\n    }\r\n}\r\ntype ValuesType = {\r\n    email: string\r\n    password: string\r\n    remember: boolean\r\n}\r\n\r\nexport const validateFormik = (values: ValuesType,\r\n                               errors: FormikErrorType,\r\n                               minPassLength: number) => {\r\n    if (!values.email) {\r\n        errors.email = 'Email is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Password required';\r\n    } else if (values.password.length < minPassLength) {\r\n        errors.password = `Min length ${minPassLength} characters`;\r\n    }\r\n    return errors;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__kD7mL\",\"errorText\":\"FormsControls_errorText__bBbMT\"};","import React from \"react\";\r\nimport {FieldProps} from \"formik\";\r\nimport s from './FormsControls.module.css';\r\n\r\ntype CustomInputPropsType = FieldProps & {\r\n    ClassName: string\r\n    placeholder: string\r\n}\r\n\r\nexport const CustomInput = ({form: {touched, errors}, field,\r\n                                ClassName, placeholder, ...props}: CustomInputPropsType) => {\r\n\r\n    const customClass = (touched && errors[field.name]) ? `${ClassName} ${s.error}` : ClassName\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                placeholder={placeholder}\r\n                className={customClass} {...field} {...props}/>\r\n            <div className={s.errorText}>\r\n                {touched && errors[field.name]}\r\n            </div>\r\n        </>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileWallpaper\":\"Profile_profileWallpaper__pAbkD\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"AboutProfile_wrapper__lmPEy\",\"avatarWrapper\":\"AboutProfile_avatarWrapper__x6aOz\",\"error\":\"AboutProfile_error__pvsV5\",\"profileAvatar\":\"AboutProfile_profileAvatar__rBSGW\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ProfileData_title__m4LU0\",\"value\":\"ProfileData_value__TkoCK\",\"name\":\"ProfileData_name__e3Em9\",\"form\":\"ProfileData_form__GF0hw\",\"saveBtn\":\"ProfileData_saveBtn__xC2es\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__rGEb2\"};","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport s from './ProfileStatus.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.PureComponent<ProfileStatusPropsType> {\r\n    // Так создается state в классовых компонентах\r\n    state = {\r\n        editMode: false,\r\n        inputValue: this.props.status,\r\n    }\r\n\r\n    //Важно использовать тут стрелочную функцию, чтобы не потерять контекст this\r\n    // т.к. контекст стреклки определяется в момент инициализации,\r\n    // в таком случае это будет наш объект/компонента\r\n    activateEdit = () => {\r\n        // Так state можно модифицировать, setState - асинхронная операция\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n\r\n    deactivateEdit = () => {\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n\r\n        if (this.state.inputValue !== this.props.status) {\r\n            this.props.updateProfileStatus(this.state.inputValue);\r\n        }\r\n    }\r\n\r\n    deactivateEditEnter = (e: KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            this.deactivateEdit();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                inputValue: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            this.setState({\r\n                inputValue: e.currentTarget.value\r\n            })\r\n        }\r\n\r\n        const selectAllHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            e.currentTarget.select();\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {this.state.editMode ?\r\n                    <input value={this.state.inputValue}\r\n                           autoFocus\r\n                           onBlur={this.deactivateEdit}\r\n                           onChange={onChangeInputHandler}\r\n                           onKeyPress={this.deactivateEditEnter}\r\n                           onFocus={selectAllHandler}\r\n                    />\r\n                    :\r\n                    <span className={s.status}\r\n                          onDoubleClick={this.activateEdit}>\r\n                        {this.props.status || 'No status'}\r\n                    </span>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ProfileContacts_title__XCebL\",\"value\":\"ProfileContacts_value__NejUU\",\"link\":\"ProfileContacts_link__b2S64\"};","import React from \"react\";\r\nimport s from \"./ProfileContacts.module.css\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    value: string\r\n}\r\n\r\nexport const ProfileContacts = ({title, value}: PropsType) => {\r\n    return (\r\n        <li className={s.title}>\r\n            <span className={s.value}>{title}:</span> <a className={s.link} href={value} rel={'noreferrer'} target={'_blank'}>{value}</a>\r\n        </li>\r\n    );\r\n}","import {ContactsType, ProfileType} from \"../../../../Redux/Profile-reducer\";\r\nimport s from \"./ProfileData.module.css\";\r\nimport React from \"react\";\r\nimport {ProfileStatus} from \"../ProfileStatus/ProfileStatus\";\r\nimport {ProfileContacts} from \"../ProfileContacts/ProfileContacts\";\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileData = ({profile, status, updateProfileStatus}: ProfileDataProps) => {\r\n    const contactList = Object.keys(profile.contacts).map(key => {\r\n        return <ProfileContacts key={key} title={key} value={profile.contacts[key as keyof ContactsType]}/>\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className={s.name}>\r\n                {profile.fullName}\r\n                <ProfileStatus status={status} updateProfileStatus={updateProfileStatus}/>\r\n            </div>\r\n            <ul>\r\n                <li className={s.title}>\r\n                    <span className={s.value}>About Me:</span> {profile.aboutMe}\r\n                </li>\r\n                <li className={s.title}>\r\n                    <span className={s.value}>Looking for job:</span>\r\n                    {profile.lookingForAJob ? 'Yes' : 'No'}\r\n                </li>\r\n                {\r\n                    profile.lookingForAJob &&\r\n                    <li className={s.title}>\r\n                        <span className={s.value}>Description for job:</span> {profile.lookingForAJobDescription}\r\n                    </li>\r\n                }\r\n                <li className={s.value}>Contacts:</li>\r\n                <ul>{contactList}</ul>\r\n            </ul>\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./ProfileData.module.css\";\r\nimport {ProfileFormDataType, ProfileType} from \"../../../../Redux/Profile-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport sc from \"../../../../common/styles/commonStyles.module.css\";\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    setEditMode: (value: boolean) => void\r\n    updateProfileData: (profileData: ProfileFormDataType) => Promise<{}>\r\n}\r\n\r\nexport const ProfileDataForm = ({profile, updateProfileData, setEditMode}: ProfileDataProps) => {\r\n    const selectAll = (e: ChangeEvent<HTMLInputElement>) => e.currentTarget.select()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            contacts: profile.contacts\r\n        },\r\n        onSubmit: (values) => {\r\n            updateProfileData(values)\r\n                .then(() => {\r\n                    formik.resetForm();\r\n                    setEditMode(false);\r\n                })\r\n        }\r\n    })\r\n\r\n    const contactList = Object.keys(profile.contacts).map(key => {\r\n        return <li key={key} className={s.title}>\r\n            <span className={s.value}>{key}:</span>\r\n            <input onFocus={selectAll} className={s.inputData} type=\"text\"\r\n                   placeholder={`${key} link`}\r\n                   {...formik.getFieldProps(`contacts.${key}`)}/>\r\n        </li>\r\n    })\r\n\r\n    return (\r\n        <form className={s.form} onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <span className={s.value}>Name:</span>\r\n                <input onFocus={selectAll} type=\"text\"\r\n                       placeholder={'Name'} {...formik.getFieldProps('fullName')}/>\r\n            </div>\r\n            <ul>\r\n                <li className={s.title}>\r\n                    <span className={s.value}>About me:</span>\r\n                    <input onFocus={selectAll} type=\"text\" placeholder={'About me'}\r\n                           {...formik.getFieldProps('aboutMe')}/>\r\n                </li>\r\n                <li className={s.title}>\r\n                    <label>\r\n                        <span className={s.value}>Looking for job</span>\r\n                        <input type=\"checkbox\" placeholder={'Looking for a job'}\r\n                               checked={formik.values.lookingForAJob}\r\n                               {...formik.getFieldProps('lookingForAJob')}/>\r\n                    </label>\r\n                </li>\r\n                {\r\n                    formik.values.lookingForAJob &&\r\n                    <li className={s.title}>\r\n                        <span className={s.value}>Job description:</span>\r\n                        <input onFocus={selectAll} type=\"text\" placeholder={'Job description'}\r\n                               {...formik.getFieldProps('lookingForAJobDescription')}\r\n                        />\r\n                    </li>\r\n                }\r\n                <li className={s.value}>Contacts:</li>\r\n                <ul>{contactList}</ul>\r\n            </ul>\r\n            <button className={`${sc.button} ${s.saveBtn}`} type={'submit'}>Save</button>\r\n        </form>\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport noAvatar from '../../../common/images/noAvatar.png';\r\nimport s from './AboutProfile.module.css';\r\nimport {ProfileType, setProfileError, ProfileFormDataType} from \"../../../Redux/Profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataForm} from \"./ProfileData/ProfileDataForm\";\r\nimport sc from '../../../common/styles/commonStyles.module.css';\r\n\r\ntype AboutProfileType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updateProfileStatus: (status: string) => void\r\n    updateProfileData: (profileData: ProfileFormDataType) => Promise<{}>\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\n\r\nfunction AboutProfile(props: AboutProfileType) {\r\n    let {profile, status, isOwner, savePhoto, updateProfileStatus, updateProfileData} = props\r\n    const error = useSelector<AppStateType, string>(state => state.profilePage.error);\r\n    const dispatch = useDispatch();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n        dispatch(setProfileError(''));\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.avatarWrapper}>\r\n                <img className={s.profileAvatar}\r\n                     src={profile.photos.large || noAvatar}\r\n                     alt={'Avatar'}\r\n                />\r\n                {isOwner &&\r\n                    <>\r\n                        <label className={sc.button}>\r\n                            Upload avatar\r\n                            <input hidden\r\n                                   type={\"file\"}\r\n                                   onChange={mainPhotoSelected}/>\r\n                        </label>\r\n                        {error && <div className={s.error}>{error}</div>}\r\n                    </>\r\n                }\r\n            </div>\r\n            <div>\r\n                {editMode ?\r\n                    <ProfileDataForm profile={profile}\r\n                                     setEditMode={setEditMode}\r\n                                     updateProfileData={updateProfileData}/>\r\n                    :\r\n                    <ProfileData profile={profile}\r\n                                 updateProfileStatus={updateProfileStatus}\r\n                                 status={status}/>\r\n                }\r\n                {isOwner &&\r\n                    (editMode ? <button className={sc.button} onClick={() => setEditMode(false)}>Back</button>\r\n                        :\r\n                        <button className={sc.button} onClick={() => setEditMode(!editMode)}>Edit Information</button>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AboutProfile;","// extracted by mini-css-extract-plugin\nexport default {\"profileAvatar\":\"Post_profileAvatar__oV4-V\",\"post\":\"Post_post__JldY-\",\"messagePost\":\"Post_messagePost__He0qG\",\"bubbleWrapper\":\"Post_bubbleWrapper__PHGUL\",\"messageText\":\"Post_messageText__NAbsn\",\"angle\":\"Post_angle__r1hf6\",\"likeWrapper\":\"Post_likeWrapper__Fe+Iq\",\"like\":\"Post_like__e9HzU\",\"countLike\":\"Post_countLike__+Vg-C\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\nimport noAvatar from '../../../../common/images/noAvatar.png';\r\nimport {PostDataType} from \"../../../../Redux/Profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../Redux/Redux-store\";\r\n\r\nfunction Post(props: PostDataType) {\r\n    const avatar = useSelector<AppStateType, string>(state => state.profilePage.profile.photos.small);\r\n\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.messagePost}>\r\n                <div className={s.likeWrapper}>\r\n                    <img className={s.profileAvatar} src={avatar || noAvatar} alt={'Avatar'}/>\r\n                    <div className={s.like}>Like</div>\r\n                    <div className={s.countLike}>{props.likesCount}</div>\r\n                </div>\r\n                <div className={s.bubbleWrapper}>\r\n                    <div className={s.angle}/>\r\n                    <span className={s.messageText}>{props.message}</span>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MyPosts_wrapper__yHKcB\",\"textFieldWrapper\":\"MyPosts_textFieldWrapper__WOpuk\",\"submitButton\":\"MyPosts_submitButton__qYTeQ\",\"customInput\":\"MyPosts_customInput__nHiJU\",\"error\":\"MyPosts_error__MlNjm\",\"newPost\":\"MyPosts_newPost__Kjhjb\"};","import {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator} from \"../../../Utils/validators/validators\";\r\nimport {CustomInput} from \"../../../common/FormsControls/FormsControls\";\r\nimport {FieldProps} from \"formik/dist/Field\";\r\nimport sc from '../../../common/styles/commonStyles.module.css';\r\n\r\ntype NewPostType = {\r\n    newPostText: string\r\n}\r\ntype MyPostsFormPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport const MyPostsForm = ({addPost}: MyPostsFormPropsType) => {\r\n\r\n    const initialValues: NewPostType = {\r\n        newPostText: ''\r\n    }\r\n\r\n    const onSubmitHandler = (values: NewPostType, actions: FormikHelpers<NewPostType>) => {\r\n        addPost(values.newPostText);\r\n        actions.resetForm();\r\n        actions.setSubmitting(false);\r\n    }\r\n\r\n    const customField = (props: FieldProps) => {\r\n        return <CustomInput ClassName={s.customInput}\r\n                            placeholder={`Type your post`}\r\n                            {...props}/>\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmitHandler}\r\n            validateOnBlur={false}>\r\n                    <Form className={s.newPost}>\r\n                        <Field name={'newPostText'}\r\n                               validate={maxLengthCreator(500)}\r\n                               placeholder={'Type your post'}>\r\n                            {customField}\r\n                        </Field>\r\n                        <button className={sc.button} type={'submit'}>Send</button>\r\n                    </Form>\r\n        </Formik>\r\n    );\r\n}","import React from \"react\";\r\nimport Post from \"./Posts/Post\";\r\nimport s from './MyPosts.module.css';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {MyPostsForm} from \"./MyPostsForm\";\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n    const postsElements = props.postsData.map(p => {\r\n        return (\r\n            <Post key={p.id}\r\n                  id={p.id}\r\n                  message={p.message}\r\n                  likesCount={p.likesCount}\r\n            />\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <MyPostsForm addPost={props.addPost}/>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import MyPosts from \"./MyPosts\";\r\nimport {addPost, PostDataType} from \"../../../Redux/Profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// Типизация пропсов для компоненты которая сидит в обертке\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    postsData: PostDataType[]\r\n    isOwner: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postData,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText) => dispatch(addPost(newPostText)),\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\r\nimport s from './Profile.module.css';\r\nimport AboutProfile from \"./AboutProfile/AboutProfile\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div className={s.profileWallpaper}>\r\n            <AboutProfile profile={props.profile}\r\n                          updateProfileStatus={props.updateProfileStatus}\r\n                          savePhoto={props.savePhoto}\r\n                          status={props.status}\r\n                          isOwner={props.isOwner}\r\n                          updateProfileData={props.updateProfileData}\r\n            />\r\n            <MyPostsContainer isOwner={props.isOwner}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {\r\n    getProfileStatus,\r\n    getUsersProfile,\r\n    ProfileType,\r\n    savePhoto, ProfileFormDataType, updateProfileData,\r\n    updateProfileStatus\r\n} from \"../../Redux/Profile-reducer\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Profile from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<withRouterPropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId.toString();\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getProfileStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<withRouterPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.props.profile && <Preloader/>}\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         // updateProfileData={this.props.updateProfileData}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport type ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype withRouterPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType;\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    authUserId: number,\r\n    isOwner: boolean,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUsersProfile: (userId: string) => void\r\n    getProfileStatus: (userId: string) => void\r\n    updateProfileStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    updateProfileData: (profileData: ProfileFormDataType) => Promise<{}>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUsersProfile, getProfileStatus, updateProfileStatus, savePhoto, updateProfileData}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["withAuthRedirect","Component","connect","state","isAuth","auth","props","restProps","to","maxLengthCreator","maxLength","value","length","validateFormik","values","errors","minPassLength","email","test","password","CustomInput","form","touched","field","ClassName","placeholder","customClass","name","s","className","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatus","editMode","inputValue","status","activateEdit","setState","deactivateEdit","updateProfileStatus","deactivateEditEnter","e","key","prevProps","prevState","this","autoFocus","onBlur","onChange","currentTarget","onKeyPress","onFocus","select","onDoubleClick","React","ProfileContacts","title","href","rel","target","ProfileData","profile","contactList","Object","keys","contacts","map","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileDataForm","updateProfileData","setEditMode","selectAll","formik","useFormik","initialValues","onSubmit","then","resetForm","type","getFieldProps","handleSubmit","checked","sc","isOwner","savePhoto","error","useSelector","profilePage","dispatch","useDispatch","useState","src","photos","large","noAvatar","alt","hidden","files","setProfileError","onClick","avatar","small","likesCount","message","MyPostsForm","addPost","newPostText","actions","setSubmitting","validateOnBlur","validate","postsElements","postsData","p","id","MyPostsContainer","postData","MyPosts","ProfileContainer","userId","match","params","authUserId","toString","getUsersProfile","getProfileStatus","refreshProfile","snapshot","Preloader","compose","withRouter","_objectWithoutProperties","source","excluded","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable"],"sourceRoot":""}