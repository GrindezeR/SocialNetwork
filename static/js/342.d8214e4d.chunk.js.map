{"version":3,"file":"static/js/342.d8214e4d.chunk.js","mappings":"8KAEO,IASMA,EAAmB,SAACC,GAE7B,OAAO,SAACC,GACJ,GAAIA,EAAMC,OAASF,EAEf,MADK,wBAAoBA,EAApB,cAYJG,EAAiB,SAACC,EACAC,EACAC,GAW3B,OAVKF,EAAOG,MAEA,4CAA4CC,KAAKJ,EAAOG,SAChEF,EAAOE,MAAQ,yBAFfF,EAAOE,MAAQ,oBAIdH,EAAOK,SAEDL,EAAOK,SAASP,OAASI,IAChCD,EAAOI,SAAP,qBAAgCH,EAAhC,gBAFAD,EAAOI,SAAW,oBAIfJ,I,yGCvCX,EAA0B,uBAA1B,EAA+D,2BAA/D,EAAsI,sBAAtI,EAAoK,qBAApK,EAAiM,qBAAjM,EAAuO,8BAAvO,EAA+Q,uBAA/Q,EAAmT,0BAAnT,EAA2V,2B,oECc9UK,EAAY,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAkC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,SACnEC,GAAaJ,EAAAA,EAAAA,KAAkC,SAAAC,GAAK,OAAIA,EAAMC,KAAKG,WAEnEC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXf,MAAO,GACPE,SAAU,GACVc,UAAU,EACVJ,QAAS,IAEbK,SAAU,SAAApB,GACN,IAAKG,EAAsCH,EAAtCG,MAAOE,EAA+BL,EAA/BK,SAAUc,EAAqBnB,EAArBmB,SAAUJ,EAAWf,EAAXe,QAChCR,GAASc,EAAAA,EAAAA,IAAMlB,EAAOE,EAAUc,EAAUJ,IAC1CC,EAAOM,aAEXC,SAAU,SAAAvB,IAEND,EAAAA,EAAAA,IAAeC,EADiB,GACD,MAIvC,OACI,kBAAMwB,UAAWC,EAAeC,aAAc,KACxCN,SAAUJ,EAAOW,aADvB,WAEI,qBAAUC,GAAG,cAAb,UACI,mBAAQ/B,MAAM,0BAElB,4BACI,oCACA,0BAAO2B,UAAWC,EACXI,KAAK,cACLC,YAAY,cACRd,EAAOe,cAAc,WAC/Bf,EAAOgB,QAAQ7B,OAASa,EAAOf,OAAOE,QACnC,iBAAMqB,UAAWC,EAAjB,SAA2BT,EAAOf,OAAOE,YAGjD,4BACI,uCACA,0BAAOqB,UAAWC,EACXQ,KAAK,WACLH,YAAY,iBACRd,EAAOe,cAAc,cAE/Bf,EAAOgB,QAAQ3B,UAAYW,EAAOf,OAAOI,WACtC,iBAAMmB,UAAWC,EAAjB,SAA2BT,EAAOf,OAAOI,eAEjD,0BACI,8BACI,0BAAO4B,KAAM,YAAgBjB,EAAOe,cAAc,eAClD,iBAAMP,UAAWC,EAAjB,8BAGPX,IACG,iBAAKU,UAAWC,EAAhB,WACI,gBAAKS,IAAKpB,EAAYqB,IAAI,UAAUC,MAAO,WAC3C,0BAAOZ,UAAWC,EACXQ,KAAK,QACDjB,EAAOe,cAAc,gBAEvCtB,IAAc,gBAAKe,UAAWC,EAAhB,SAA0BhB,KACzC,mBAAQe,UAAWa,EAAAA,EAAAA,OAAWJ,KAAK,SAAnC,uB,UCvECK,EAAQ,WAGjB,OAFe5B,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAK2B,WAI9D,SAAC,KAAD,CAAUC,GAAI,cAKlB,iBAAKhB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,sCACA,SAACnB,EAAD,KACA,iBAAKkB,UAAWC,EAAhB,WACI,kDACA,yDACA,oDAMhB","sources":["Utils/validators/validators.ts","webpack://social_network/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["import {FormikErrorType} from \"../../components/Login/LoginForm\";\r\n\r\nexport const required = (value: string) => {\r\n    let error = ''\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    error = `Field required`\r\n    return error\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    let error = ''\r\n    return (value: string) => {\r\n        if (value.length > maxLength) {\r\n            error = `Max length is ${maxLength} symbols`\r\n            return error;\r\n        }\r\n        return undefined\r\n    }\r\n}\r\ntype ValuesType = {\r\n    email: string\r\n    password: string\r\n    remember: boolean\r\n}\r\n\r\nexport const validateFormik = (values: ValuesType,\r\n                               errors: FormikErrorType,\r\n                               minPassLength: number) => {\r\n    if (!values.email) {\r\n        errors.email = 'Email is required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Password required';\r\n    } else if (values.password.length < minPassLength) {\r\n        errors.password = `Min length ${minPassLength} characters`;\r\n    }\r\n    return errors;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__L2acc\",\"formWrapper\":\"Login_formWrapper__gdj9D\",\"loginBtn\":\"Login_loginBtn__CrFe+\",\"inputs\":\"Login_inputs__-Mk9S\",\"title\":\"Login_title__IqtVm\",\"error\":\"Login_error__EpTBD\",\"captchaWrapper\":\"Login_captchaWrapper__OhIk6\",\"captcha\":\"Login_captcha__fe5U-\",\"rememberMe\":\"Login_rememberMe__HQtAi\",\"infoAccount\":\"Login_infoAccount__1TF66\"};","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {login} from \"../../Redux/Auth-reducer\";\r\nimport s from \"./Login.module.css\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {validateFormik} from \"../../Utils/validators/validators\";\r\nimport sc from '../../common/styles/commonStyles.module.css';\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const errorLogin = useSelector<AppStateType, string>(state => state.auth.error);\r\n    const captchaUrl = useSelector<AppStateType, string>(state => state.auth.captcha);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            remember: false,\r\n            captcha: '',\r\n        },\r\n        onSubmit: values => {\r\n            let {email, password, remember, captcha} = values\r\n            dispatch(login(email, password, remember, captcha));\r\n            formik.resetForm();\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            validateFormik(values, errors, 3);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form className={s.formWrapper} autoComplete={'on'}\r\n              onSubmit={formik.handleSubmit}>\r\n            <datalist id=\"suggestions\">\r\n                <option value=\"valariot@gmail.com\"/>\r\n            </datalist>\r\n            <div>\r\n                <div>Email</div>\r\n                <input className={s.inputs}\r\n                       list=\"suggestions\"\r\n                       placeholder=\"Type email\"\r\n                       {...formik.getFieldProps('email')}/>\r\n                {formik.touched.email && formik.errors.email &&\r\n                    <span className={s.error}>{formik.errors.email}</span>}\r\n            </div>\r\n\r\n            <div>\r\n                <div>Password</div>\r\n                <input className={s.inputs}\r\n                       type=\"password\"\r\n                       placeholder=\"Type password\"\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.touched.password && formik.errors.password &&\r\n                    <span className={s.error}>{formik.errors.password}</span>}\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    <input type={\"checkbox\"} {...formik.getFieldProps('remember')}/>\r\n                    <span className={s.rememberMe}>Remember me</span>\r\n                </label>\r\n            </div>\r\n            {captchaUrl &&\r\n                <div className={s.captchaWrapper}>\r\n                    <img src={captchaUrl} alt=\"captcha\" width={'140px'}/>\r\n                    <input className={s.captcha}\r\n                           type=\"text\"\r\n                           {...formik.getFieldProps('captcha')}/>\r\n                </div>}\r\n            {errorLogin && <div className={s.error}>{errorLogin}</div>}\r\n            <button className={sc.button} type=\"submit\">LogIn</button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport s from './Login.module.css';\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth);\r\n\r\n    if (isAuth) {\r\n        return (\r\n            <Redirect to={'/profile'}/>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.title}>Login to Social Network</div>\r\n            <LoginForm/>\r\n            <div className={s.infoAccount}>\r\n                <span>Free Account Data:</span>\r\n                <span>Email: free@samuraijs.com</span>\r\n                <span>Password: free</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\n"],"names":["maxLengthCreator","maxLength","value","length","validateFormik","values","errors","minPassLength","email","test","password","LoginForm","dispatch","useDispatch","errorLogin","useSelector","state","auth","error","captchaUrl","captcha","formik","useFormik","initialValues","remember","onSubmit","login","resetForm","validate","className","s","autoComplete","handleSubmit","id","list","placeholder","getFieldProps","touched","type","src","alt","width","sc","Login","isAuth","to"],"sourceRoot":""}